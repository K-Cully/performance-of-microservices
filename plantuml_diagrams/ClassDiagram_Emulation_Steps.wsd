@startuml

'Import skinparams'
!include .\Skinparams.puml

title ClusterEmulator.Emulation.Steps Class Diagram

namespace ClusterEmulator.Emulation.Core {
    interface IConfigModel<TModel> {
        + AsTypeModel(logger) : TModel
    }
}

namespace ClusterEmulator.Models {
    class AdaptableRequest {
        + Payload : IEnumerable<string>
    }
}

namespace System.Net.Http #whitesmoke {
    interface IHttpClientFactory {
        + CreateClient(name) : HttpClient
    }

    IHttpClientFactory -> HttpClient : creates
}

namespace ClusterEmulator.Emulation.Steps {
    interface IStep<extends IConfigModel<IStep>> extends ClusterEmulator.Emulation.Core.IConfigModel {
        + ParallelCount : uint
        + FailOnParallelFailures : GroupClause
        + ExecuteAsync() : ExecutionStatus
    }

    enum GroupClause {
        + Undefined
        + Any
        + All
        + None
    }

    enum ExecutionStatus {
        + Fail
        + Success
        + SimulatedFail
    }

    interface IRequestStep extends IStep {
        + ClientName : string
        + ReuseHttpMessageHandler : boolean
        + Configure(httpClientFactory)
        + Configure(httpClientFactory, requestPolicy);
    }

    abstract SimulationStep implements IStep {
        # Logger : ILogger
        + {abstract} ExecuteAsync : ExecutionStatus
    }

    class DelayStep implements SimulationStep {
        + Time : double
        - Delay : TimeSpan
    }

    class ErrorStep implements SimulationStep {
        + Probability : double
    }

    class LoadStep implements SimulationStep {
        + TimeInSeconds : double
        + CpuPercentage : integer
        + MaxProcessors : integer
        + MemoryInBytes : ulong
        - ProcessorCount : integer
        - GenerateLoad(seconds, percentage)
    }

    class RequestStep implements SimulationStep, IRequestStep {
        - {static} ChunkChars : integer
        - configured : boolean
        - policy : IAsyncPolicy
        - clientFactory : IHttpClientFactory
        - random : Random
        - pendingDisposals : IDictionary<Guid, IList<IDisposable>>
        - supportedMethodNames : ISet<string>
        - supportedMethods : ISet<HttpMethod>
        + Asynchrounous : boolean
        + CacheId : string
        + CacheUniqueness : integer
        + Method : string
        + Path : string
        + PayloadSize : string
        .. getters ..
        - {static} httpMethods : IEnumerable<HttpMethod>
        - Context : Polly.Context
        - CacheKeyNumber : integer
        + Configured : configured
        ----
        - DisposePending(disposalKey)
        - ExecuteRequestAsync(action, cancellationToken) : HttpResponseMessage
        - GenerateRequest() : AdaptableRequest
        - GetRequestAction(httpClient, disposalId) : Func<CancellationToken, Task<HttpResponseMessage>>
        - HandleRequestAsync(request, disposalId)
        - ScheduleDisposal(disposalKey, disposable)
        - SendRequest(requestTask)
    }

    SimulationStep *-right-> GroupClause
    SimulationStep -> ExecutionStatus
}

namespace Polly #whitesmoke {
    interface IAsyncPolicy
    class Context    
}

ClusterEmulator.Emulation.Steps.RequestStep o--> Polly.Context
ClusterEmulator.Emulation.Steps.RequestStep o--> System.Net.Http.IHttpClientFactory
ClusterEmulator.Emulation.Steps.RequestStep --> System.Net.Http.HttpClient
ClusterEmulator.Emulation.Steps.RequestStep --> Polly.IAsyncPolicy
ClusterEmulator.Emulation.Steps.RequestStep --> ClusterEmulator.Models.AdaptableRequest

@enduml