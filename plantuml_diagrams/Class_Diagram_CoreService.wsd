@startuml
title Core Service Class Diagram

class AdaptableController {
    - engine : IEngine
    - ProcessRequestAsync(name, caller) : IActionResult
    + Get(name, caller) : IActionResult
    + Delete(name, caller) : IActionResult
    + Options(name, caller) : IActionResult
    + Post(name, request, caller) : IActionResult
    + Put(name, request, caller) : IActionResult
}

interface IEngine {
    + ProcessRequestAsync(name) : IActionResult
}

class Engine implements IEngine {
    - IRegistry registry
}

interface IRegistry {
    + PolicyRegistry : IPolicyRegistry<string>
    + Clients : IEnumerable<KeyValuePair<string, ClientConfig>>
    + ConfigureHttpClients(httpClientFactory)
    + GetClient(name) : ClientConfig
    + GetPolicy(name) : IAsyncPolicy
    + GetProcessor(name) : IProcessor
    + GetStep(name) : IStep
}

class Registry implements IRegistry {
    - clients : IDictionary<string, ClientConfig>
    - policies : IDictionary<string, IAsyncPolicy>
    - processors : IDictionary<string, IProcessor>
    - steps : IDictionary<string, IStep>
    - simpleClientFactory : IHttpClientFactory
    + {static} ClientsSection : string
    + {static} PoliciesSection : string
    + {static} ProcessorsSection : string
    + {static} StepsSection : string
    - InitializeFromSettings<T>(settings, sectionName, registry, factory);
    - GetRegisteredValue<T>(name, registry, typeName) : T
    + Registry(configurationSettings, stepFactory,
            processorFactory, policyFactory, clientFactory)
    + ConfigureHttpClients(httpClientFactory)
}


interface IHttpClientFactory {
    CreateClient(name) : HttpClient
}

class SimpleHttpClientFactory implements IHttpClientFactory {
    - clients : IDictionary<string, ClientConfig>
    + SimpleHttpClientFactory(clientConfigs)
}


interface IAsyncPolicy

interface IPolicyConfiguration {
    + AsPolicy() : IAsyncPolicy
}

class TimeoutConfig implements IPolicyConfiguration {
    + CancelDelegates : boolean
    + TimeoutInSeconds : double
}

class RetryConfig implements IPolicyConfiguration {
    + Retries : integer
    + DelaysInSeconds : IEnumerable<double>
    + JitterMilliseconds : integer
    - Delay(retryCount, exponential) : TimeSpan
    - ExponentialDelay(retryCount) : TimeSpan
    - DelayWithJitter(delay) : TimeSpan
}

interface IPolicyFactory {
    Create(settingValue) : IAsyncPolicy
}

class PolicyFactory implements IPolicyFactory {
    - errors : List<string>
    - policyNamespace : string
    - serializerSettings : JsonSerializerSettings
}


interface IConfigFactory<TModel> {
    Create(string settingValue) : TModel
}

class ConfigFactory<TModel> implements IConfigFactory {
    - errors : List<string>
    - serializerSettings : JsonSerializerSettings
}


interface IProcessor {
    + ErrorPayload : ErrorResponse
    + ErrorPayloadSize : integer
    + IngressLatencyMilliseconds : integer
    + Steps : IList<string>
    + SuccessPayload : SuccessResponse
    + SuccessPayloadSize : integer
}

Class SuccessResponse {
    + Result : string
}

Class ErrorResponse {
    + Error : string
}

class Processor implements IProcessor {
}


enum ExecutionStatus {
    Unexpected : 0
    Success : 1
    Fail : 2
}


interface IStep {
    + ExecuteAsync() : Task<ExecutionStatus>
}

interface IStepFactory {
    + Create(settingValue) : IStep
}

class StepFactory implements IStepFactory {
    - errors : List<string>
    - stepNamespace : string
    - serializerSettings : JsonSerializerSettings
}

interface IRequestStep {
    + ClientName : string
    + ReuseHttpClient : boolean
    + Configure(httpClientFactory)
    + Configure(httpClientFactory, requestPolicy);
}

class RequestStep implements IStep, IRequestStep {
    - configured : boolean
    - clientFactory : IHttpClientFactory
    - policy : IAsyncPolicy<HttpResponseMessage>
    - supportedMethods : IEnumerable<string>
    + Configured : configured
    - ExecuteRequestAsync(action, cancellationToken) : Task
    - GetRequestAction(httpClient) : Func<CancellationToken, Task>
    - SendRequest(requestTask)
}

class LoadStep implements IStep {
    + TimeInSeconds : integer
    + CpuPercentage : integer
    + MemoryInBytes : ulong
    - GenerateLoad(seconds, percentage) : Task
}

class ErrorStep implements IStep {
    + Probability : double
}

class AdaptableRequest {
    + Payload : IEnumerable<string>
}


class ClientConfig {
    + BaseAddress : string
    + Policies : IEnumerable<string>
    + RequestHeaders : IDictionary<string, string>
}


AdaptableController --|> IEngine : ProcessRequestAsync(name) >

Engine --|> IRegistry : GetProcessor(name) >
Engine o--|> IProcessor
Engine --|> IRegistry : GetStep(name) >
Engine o--|> "1..*" IStep : ExecuteAsync()

Registry --> IConfigFactory : Create(value)\n : Processor >
Registry --> IConfigFactory : Create(value)\n : ClientConfig >
Registry --> IStepFactory : Create(value) >
IPolicyFactory <-- Registry : Create(value) <
IHttpClientFactory <--o Registry
Registry o--> "1..*" IStep
Registry o--> "1..*" IProcessor
Registry o--> "1..*" ClientConfig
IAsyncPolicy "1..*" <--o Registry
Registry o--|> "1..*" IRequestStep : Configure(httpClientFactory),\nConfigure(httpClientFactory, requestPolicy)  >

Processor o--|> SuccessResponse
Processor o--|> ErrorResponse

ExecutionStatus <-- IStep

RequestStep --> IHttpClientFactory : CreateClient(name) >
RequestStep o--|> "0..1" AdaptableRequest

ConfigFactory --> Processor : Creates
ConfigFactory --> ClientConfig : Creates
StepFactory --> RequestStep : Creates
StepFactory --> LoadStep : Creates
StepFactory --> ErrorStep : Creates
IPolicyFactory --> IAsyncPolicy : Creates

PolicyFactory --> RetryConfig : Creates
PolicyFactory --> TimeoutConfig : Creates
PolicyFactory --> IPolicyConfiguration : AsPolicy()

@enduml