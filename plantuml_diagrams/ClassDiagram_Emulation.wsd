@startuml

skinparam class {
    FontName Arial
    BorderColor black
    BackgroundColor whitesmoke
    ArrowColor black
}

title ClusterEmulator.Emulation Class Diagram


namespace Controllers {
    class AdaptableController {
        - engine : IEngine
        - log : ILogger<AdaptableController>
        - correlatedLog : IScopedLogContextFactory
        - ProcessRequestAsync(name, caller) : IActionResult
        + Get(name, caller) : IActionResult
        + Delete(name, caller) : IActionResult
        + Options(name, caller) : IActionResult
        + Post(name, request, caller) : IActionResult
        + Put(name, request, caller) : IActionResult
    }
}

namespace Core {
    interface IConfigFactory<TModel> {
        + Create(string settingValue) : TModel
    }

    class ConfigFactory<TModel> implements IConfigFactory {
        # Errors : List<string>
        - serializerSettings : JsonSerializerSettings
        ..getters..
        # SerializerSettings : JsonSerializerSettings
        ..readonly..
        # log : ILogger
        ----
        + ConfigFactory(ILogger logger)
        # DeserializeSettingWithErrorHandling(string settingValue) : TModel
    }

    interface IEngine {        
        + ProcessRequestAsync(name) : IActionResult
        + ProcessStartupActionsAsync()
    }

    class Engine implements IEngine {
        - IRegistry registry
    }

    interface IRegistry {
        + PolicyRegistry : IPolicyRegistry<string>
        + Clients : IEnumerable<KeyValuePair<string, ClientConfig>>
        + ConfigureHttpClients(httpClientFactory)
        + GetClient(name) : ClientConfig
        + GetPolicy(name) : IAsyncPolicy
        + GetProcessor(name) : IProcessor
        + GetStep(name) : IStep
    }

    class Registry implements IRegistry {
        - clients : IDictionary<string, ClientConfig>
        - policies : IDictionary<string, IAsyncPolicy>
        - processors : IDictionary<string, IProcessor>
        - steps : IDictionary<string, IStep>
        - simpleClientFactory : IHttpClientFactory
        + {static} ClientsSection : string
        + {static} PoliciesSection : string
        + {static} ProcessorsSection : string
        + {static} StepsSection : string
        - InitializeFromSettings<T>(settings, sectionName, registry, factory);
        - GetRegisteredValue<T>(name, registry, typeName) : T
        + Registry(configurationSettings, stepFactory,
        processorFactory, policyFactory, clientFactory)
        + ConfigureHttpClients(httpClientFactory)
    }

    

    class SimpleHttpClientFactory implements IHttpClientFactory {
        - clients : IDictionary<string, ClientConfig>
        + SimpleHttpClientFactory(clientConfigs)
    }
}


interface IHttpClientFactory {
    CreateClient(name) : HttpClient
}



interface IAsyncPolicy

namespace HttpClientConfiguration {
    interface IPolicyConfiguration {
        + AsPolicy() : IAsyncPolicy
    }

    class TimeoutConfig implements IPolicyConfiguration {
        + CancelDelegates : boolean
        + TimeoutInSeconds : double
    }

    class RetryConfig implements IPolicyConfiguration {
        + Retries : integer
        + DelaysInSeconds : IEnumerable<double>
        + JitterMilliseconds : integer
        - Delay(retryCount, exponential) : TimeSpan
        - ExponentialDelay(retryCount) : TimeSpan
        - DelayWithJitter(delay) : TimeSpan
    }

    class ClientConfig {
        + BaseAddress : string
        + Policies : IEnumerable<string>
        + RequestHeaders : IDictionary<string, string>
    }
}



interface IPolicyFactory {
    Create(settingValue) : IAsyncPolicy
}

class PolicyFactory implements IPolicyFactory {
    - errors : List<string>
    - policyNamespace : string
    - serializerSettings : JsonSerializerSettings
}

namespace Processors {
    interface IProcessor {
        + ErrorPayload : ErrorResponse
        + ErrorPayloadSize : integer
        + IngressLatencyMilliseconds : integer
        + Steps : IList<string>
        + SuccessPayload : SuccessResponse
        + SuccessPayloadSize : integer
    }

    class Processor implements IProcessor {
    }
}

Class SuccessResponse {
    + Result : string
}

Class ErrorResponse {
    + Error : string
}

enum ExecutionStatus {
    Unexpected : 0
    Success : 1
    Fail : 2
}

namespace Steps {
    interface IStep {
        + ExecuteAsync() : Task<ExecutionStatus>
    }

    interface IRequestStep {
        + ClientName : string
        + ReuseHttpMessageHandler : boolean
        + Configure(httpClientFactory)
        + Configure(httpClientFactory, requestPolicy);
    }

    class RequestStep implements IStep, IRequestStep {
        - configured : boolean
        - clientFactory : IHttpClientFactory
        - policy : IAsyncPolicy<HttpResponseMessage>
        - supportedMethods : IEnumerable<string>
        + Configured : configured
        - ExecuteRequestAsync(action, cancellationToken) : Task
        - GetRequestAction(httpClient) : Func<CancellationToken, Task>
        - SendRequest(requestTask)
    }

    class LoadStep implements IStep {
        + TimeInSeconds : integer
        + CpuPercentage : integer
        + MemoryInBytes : ulong
        - GenerateLoad(seconds, percentage) : Task
    }

    class ErrorStep implements IStep {
        + Probability : double
    }
}


interface IStepFactory {
    + Create(settingValue) : IStep
}

class StepFactory implements IStepFactory {
    - errors : List<string>
    - stepNamespace : string
    - serializerSettings : JsonSerializerSettings
}


class AdaptableRequest {
    + Payload : IEnumerable<string>
}




Controllers.AdaptableController --|> Core.IEngine : ProcessRequestAsync(name) >

Core.Engine --|> Core.IRegistry : GetProcessor(name) >
Core.Engine o--|> Processors.IProcessor
Core.Engine --|> Core.IRegistry : GetStep(name) >
Core.Engine o--|> "1..*" Steps.IStep : ExecuteAsync()

Core.Registry --> Core.IConfigFactory : Create(value)\n : Processor >
Core.Registry --> Core.IConfigFactory : Create(value)\n : ClientConfig >
Core.Registry --> IStepFactory : Create(value) >
IPolicyFactory <-- Core.Registry : Create(value) <
IHttpClientFactory <--o Core.Registry
Core.Registry o--> "1..*" Steps.IStep
Core.Registry o--> "1..*" Processors.IProcessor
Core.Registry o--> "1..*" HttpClientConfiguration.ClientConfig
IAsyncPolicy "1..*" <--o Core.Registry
Core.Registry o--|> "1..*" Steps.IRequestStep : Configure(httpClientFactory),\nConfigure(httpClientFactory, requestPolicy)  >

Processors.Processor o--|> SuccessResponse
Processors.Processor o--|> ErrorResponse

ExecutionStatus <-- Steps.IStep

Steps.RequestStep --> IHttpClientFactory : CreateClient(name) >
Steps.RequestStep o--|> "0..1" AdaptableRequest

Core.ConfigFactory --> Processors.Processor : Creates
Core.ConfigFactory --> ClientConfig : Creates
StepFactory --> Steps.RequestStep : Creates
StepFactory --> Steps.LoadStep : Creates
StepFactory --> Steps.ErrorStep : Creates
IPolicyFactory --> IAsyncPolicy : Creates

PolicyFactory --> HttpClientConfiguration.RetryConfig : Creates
PolicyFactory --> HttpClientConfiguration.TimeoutConfig : Creates
PolicyFactory --> HttpClientConfiguration.IPolicyConfiguration : AsPolicy()

@enduml