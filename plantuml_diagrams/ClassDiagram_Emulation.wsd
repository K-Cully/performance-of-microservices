@startuml

skinparam class {
    FontName Arial
    BorderColor black
    BackgroundColor whitesmoke
    ArrowColor black
}

title ClusterEmulator.Emulation Class Diagram


namespace Controllers {
    class AdaptableController {
        - engine : IEngine
        - log : ILogger<AdaptableController>
        - correlatedLog : IScopedLogContextFactory
        - ProcessRequestAsync(name, caller) : IActionResult
        + Get(name, caller) : IActionResult
        + Delete(name, caller) : IActionResult
        + Options(name, caller) : IActionResult
        + Post(name, request, caller) : IActionResult
        + Put(name, request, caller) : IActionResult
    }
}

namespace Core {
    interface IConfigFactory<TModel> {
        + Create(settingValue) : TModel
    }

    class ConfigFactory<TModel> implements IConfigFactory {
        - serializerSettings : JsonSerializerSettings
        # log : ILogger
        # Errors : List<string>
        ..getters..
        # SerializerSettings : JsonSerializerSettings
        ----
        # DeserializeSettingWithErrorHandling(settingValue) : TModel
        + ConfigFactory(ILogger logger)
    }

    interface IEngine {
        + ProcessRequestAsync(name) : IActionResult
        + ProcessStartupActionsAsync()
    }

    class Engine implements IEngine {
        - registry : IRegistry
        - log : ILogger
        - RunStartupSteps(steps, processorName)
        - ExcuteStepInParallel(name, stepName, step) : ExecutionStatus
        + Engine(logger, registry)
    }

    interface IConfigModel<TModel> {
        + AsTypeModel(logger) : TModel
    }

    interface IRegistry {
        + PolicyRegistry : IPolicyRegistry<string>
        + Clients : IEnumerable<KeyValuePair<string, ClientConfig>>
        + ConfigureHttpClients(httpClientFactory)
        + GetClient(name) : ClientConfig
        + GetPolicy(name) : IAsyncPolicy<HttpResponseMessage>
        + GetRequestProcessor(name) : IRequestProcessor
        + GetStartupProcessors() : IEnumerable<IStartupProcessor>
        + GetStep(name) : IStep
    }

    interface IRegistrySettings {
        + TryGetSection(name, out section) : bool
    }

    class Registry implements IRegistry {
        - clients : IDictionary<string, ClientConfig>
        - policies : IDictionary<string, IAsyncPolicy<HttpResponseMessage>>
        - processors : IDictionary<string, IProcessor>
        - steps : IDictionary<string, IStep>
        - log : ILogger
        - simpleClientFactory : IHttpClientFactory
        + {static} ClientsSection : string
        + {static} PoliciesSection : string
        + {static} ProcessorsSection : string
        + {static} StepsSection : string
        ..getters..
        + Clients : IEnumerable<KeyValuePair<string, ClientConfig>>
        + PolicyRegistry : IPolicyRegistry<string>
        ----
        - InitializeFromSettings<T>(settings, sectionName, registry, factory);
        - GetRegisteredValue<T>(name, registry, registryName) : T
        + Registry(settings, stepFactory, processorFactory, policyFactory,
        clientFactory, logger, loggerFactory)
        + ConfigureHttpClients(httpClientFactory)
    }

    class NestedConfigFactory<TConfigModel, TModel> extends ConfigFactory {
        - logFactory : ILoggerFactory
        - configNamespace : string
        + NestedConfigFactory(logger, loggerFactory)        
    }

    class SimpleHttpClientFactory implements IHttpClientFactory {
        - clients : IDictionary<string, ClientConfig>
        - log : ILogger
        + SimpleHttpClientFactory(clientConfigs, logger)
    }
}


namespace Extensions {
    class ServiceCollectionExtensions << (S,#DDAA00) static >> {
        + {static} AddSimulationEngine(serviceCollection) : IServiceCollection
        + {static} AddSimulationEngineClients(serviceCollection, registry)
    }
}


namespace System.Net.Http {
    interface IHttpClientFactory {
        + CreateClient(name) : HttpClient
    }
}


interface IAsyncPolicy

namespace HttpClientConfiguration {
    interface IPolicyConfiguration<extends IConfigModel<IAsyncPolicy>> extends Core.IConfigModel

    class PolicyExtensions << (S,#DDAA00) static >> {
        + {static} HandleHttpRequests() : PolicyBuilder<HttpResponseMessage>
    }

    class AdvancedCircuitBreakerConfig implements IPolicyConfiguration {
        + BreakDuration : double
        + FailureThreshold : double
        + SamplingDuration : double
        + MinimumThroughput : integer
    }

    class BulkheadConfig implements IPolicyConfiguration {
        + MaxParallelization : integer
        + MaxQueuingActions : integer
    }

    class CacheConfig implements IPolicyConfiguration {
        + Time : CacheTime
        + Absolute : boolean
        + Sliding : boolean
        - cacheProvider : IAsyncCacheProvider
        - strategy : ITtlStrategy
        + CacheConfig()
        + CacheConfig(cacheProvider)
        - CacheOKResponse(pollyContext, httpResponseMessage) : Ttl
        - CreateStrategy() : ITtlStrategy
    }

    class CacheTime {
        + Days : integer
        + Hours : integer
        + Minutes : integer
        + Seconds : integer
        + AsTimeSpan() : TimeSpan
    }

    class CircuitBreakerConfig implements IPolicyConfiguration {
        + BreakDuration : double
        + FaultTolerance : integer        
    }

    class FallbackConfig implements IPolicyConfiguration { 
        + Content : string
        + Reason : string
        + Status : integer        
    }

    class RetryConfig implements IPolicyConfiguration {
        + Retries : integer
        + DelaysInSeconds : IEnumerable<double>
        + JitterMilliseconds : integer
        - Delay(retryCount, exponential) : TimeSpan
        - ExponentialDelay(retryCount) : TimeSpan
        - DelayWithJitter(delay) : TimeSpan
    }

    class TimeoutConfig implements IPolicyConfiguration {
        + CancelDelegates : boolean
        + TimeoutInSeconds : double
    }

    class ClientConfig {
        + BaseAddress : string
        + Policies : IEnumerable<string>
        + RequestHeaders : IDictionary<string, string>
    }
}

namespace Logging {
    interface IScopedLogContextFactory {
        + InitializeFrom(httpContext) : IDisposable
    }
}

namespace Processors {
    interface IProcessor<extends IConfigModel<IProcessor>> extends Core.IConfigModel {
        + Steps : IList<string>
    }

    interface IRequestProcessor extends IProcessor {        
        + ErrorPayload : ErrorResponse
        + ErrorPayloadSize : integer
        + IngressLatencyMilliseconds : integer
        + SuccessPayload : SuccessResponse
        + SuccessPayloadSize : integer
    }

    interface IStartupProcessor extends IProcessor {
        + Asynchronous : boolean
    }

    abstract Processor implements IProcessor {
        # Log : ILogger
    }

    class RequestProcessor extends Processor implements IRequestProcessor

    class StartupProcessor extends Processor implements IStartupProcessor
}

namespace Steps {
    interface IStep<extends IConfigModel<IStep>> extends Core.IConfigModel {
        + ParallelCount : uint
        + FailOnParallelFailures : GroupClause
        + ExecuteAsync() : ExecutionStatus
    }

    enum GroupClause {
        + Undefined
        + Any
        + All
        + None
    }

    enum ExecutionStatus {
        + Fail
        + Success
        + SimulatedFail
    }

    interface IRequestStep extends IStep {
        + ClientName : string
        + ReuseHttpMessageHandler : boolean
        + Configure(httpClientFactory)
        + Configure(httpClientFactory, requestPolicy);
    }

    abstract SimulationStep implements IStep {
        # Logger : ILogger
        + {abstract} ExecuteAsync : ExecutionStatus
    }

    class DelayStep implements SimulationStep {
        + Time : double
        - Delay : TimeSpan
    }

    class ErrorStep implements SimulationStep {
        + Probability : double
    }

    class LoadStep implements SimulationStep {
        + TimeInSeconds : double
        + CpuPercentage : integer
        + MaxProcessors : integer
        + MemoryInBytes : ulong
        - ProcessorCount : integer
        - GenerateLoad(seconds, percentage)
    }

    class RequestStep implements SimulationStep, IRequestStep {
        - {static} ChunkChars : integer
        - configured : boolean
        - policy : IAsyncPolicy
        - clientFactory : IHttpClientFactory
        - random : Random
        - pendingDisposals : IDictionary<Guid, IList<IDisposable>>
        - supportedMethodNames : ISet<string>
        - supportedMethods : ISet<HttpMethod>
        + Asynchrounous : boolean
        + CacheId : string
        + CacheUniqueness : integer
        + Method : string
        + Path : string
        + PayloadSize : string
        .. getters ..
        - {static} httpMethods : IEnumerable<HttpMethod>
        - Context : Polly.Context
        - CacheKeyNumber : integer
        + Configured : configured
        ----
        - DisposePending(disposalKey)
        - ExecuteRequestAsync(action, cancellationToken) : HttpResponseMessage
        - GenerateRequest() : AdaptableRequest
        - GetRequestAction(httpClient, disposalId) : Func<CancellationToken, Task<HttpResponseMessage>>
        - HandleRequestAsync(request, disposalId)
        - ScheduleDisposal(disposalKey, disposable)
        - SendRequest(requestTask)
    }
}

Controllers.AdaptableController --|> Core.IEngine : ProcessRequestAsync(name) >

Core.Engine --|> Core.IRegistry : GetProcessor(name) >
Core.Engine o--|> Processors.IProcessor
Core.Engine --|> Core.IRegistry : GetStep(name) >
Core.Engine o--|> "1..*" Steps.IStep : ExecuteAsync()

Core.Registry --> Core.IConfigFactory : Create(value)\n : Processor >
Core.Registry --> Core.IConfigFactory : Create(value)\n : ClientConfig >
Core.Registry --> IStepFactory : Create(value) >
IPolicyFactory <-- Core.Registry : Create(value) <
System.Net.Http.IHttpClientFactory <--o Core.Registry
Core.Registry o--> "1..*" Steps.IStep
Core.Registry o--> "1..*" Processors.IProcessor
Core.Registry o--> "1..*" HttpClientConfiguration.ClientConfig
IAsyncPolicy "1..*" <--o Core.Registry
Core.Registry o--|> "1..*" Steps.IRequestStep : Configure(httpClientFactory),\nConfigure(httpClientFactory, requestPolicy)  >

Processors.Processor o--|> SuccessResponse
Processors.Processor o--|> ErrorResponse

ExecutionStatus <-- Steps.IStep

Steps.RequestStep --> System.Net.Http.IHttpClientFactory : CreateClient(name) >
Steps.RequestStep o--|> "0..1" AdaptableRequest

Core.ConfigFactory --> Processors.Processor : Creates
Core.ConfigFactory --> ClientConfig : Creates
StepFactory --> Steps.RequestStep : Creates
StepFactory --> Steps.LoadStep : Creates
StepFactory --> Steps.ErrorStep : Creates
IPolicyFactory --> IAsyncPolicy : Creates

PolicyFactory --> HttpClientConfiguration.RetryConfig : Creates
PolicyFactory --> HttpClientConfiguration.TimeoutConfig : Creates
PolicyFactory --> HttpClientConfiguration.IPolicyConfiguration : AsPolicy()

@enduml