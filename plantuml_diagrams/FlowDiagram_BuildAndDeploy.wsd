@startuml

'Import Azure Sympols (MIT License)'
!define AzurePuml https://raw.githubusercontent.com/RicardoNiepel/Azure-PlantUML/master/dist
!include AzurePuml/AzureCommon.puml
!include AzurePuml/Compute/AzureServiceFabric.puml
!include AzurePuml/Compute/AzureVirtualMachineScaleSet.puml
!include AzurePuml/DevOps/AzureApplicationInsights.puml
!include AzurePuml/Management/AzureLogAnalytics.puml
!include AzurePuml/Networking/AzureLoadBalancer.puml
!include AzurePuml/Security/AzureKeyVault.puml

'Import skinparams'
!include .\Skinparams.puml

title Application Generation and Deployment

interface "dotnet new" as dotnetNew
interface "Cluster\nEmulator\nLibraries" as ClusterLibraries
interface "EmulationService\nTemplate" as ServiceTemplate

folder "Generated Application" {
    file "ports.json" as ports
    file "Emulation Library Projects" as libraries
    file "Templated Service Projects" as projects
}

projects .. libraries
libraries -[hidden]-> ports

package "Application Generation" {
    agent AppGenerator

    file "appsettings.json" as appSettings
    file "App Configuration.json" as appConfig

    appConfig .. appSettings : optional reference
    appConfig -> AppGenerator

    AppGenerator .up.> dotnetNew

    AppGenerator -> projects : output
    AppGenerator --> libraries : output
    AppGenerator --> ports : output
}

ServiceTemplate --> AppGenerator
ClusterLibraries --> AppGenerator

interface "dotnet publish" as dotnetPub

folder "Generated Package" {    
    file "Packaged Application" as appPackage
}

package "Package Generation" {
    agent AppPacker

    ports -> AppPacker
    projects -> AppPacker

    AppPacker ..> dotnetPub
    AppPacker -> appPackage : output
}


package "Cluster Provisioning" {
    file "ARM Template" as armTemplate
    file "Certificate" as cert
    agent "Azure Service Fabric\nProvisioner" as provisioner

    'note: significant layout change can be made by altering this connection'
    ports -> provisioner
    cert -up-> provisioner
    armTemplate -> provisioner
    provisioner -> Azure : provision\ncomponents
    
    agent "Deploy Application" as deployApp
    cert --> deployApp
}

appPackage -> deployApp


cloud Azure {
    AzureLoadBalancer(loadBalancer, "Load Balancer", "ingress controller", "Handles service ingress and liveness")
    AzureKeyVault(keyVault, "Key Vault", "secret storage")
    database "Platform Telemetry\nStorage" as storage

    frame "Secure Virtual Network" {      
      AzureServiceFabric(sfCluster, "Service Fabric Cluster", "N Node cluster")
      AzureVirtualMachineScaleSet(scaleSet, "VM Scale Set", "N VMs", "Service hosting")

      sfCluster -> scaleSet
    }

    loadBalancer --> sfCluster
    sfCluster -> keyVault
    sfCluster --> storage

    AzureApplicationInsights(appInsights, "Application Insights", "App telemetry")
    AzureLogAnalytics(logAnalytics, "Log Analytics", "Platform telemetry")

    scaleSet --> appInsights
    scaleSet --> logAnalytics
    storage -> logAnalytics
}

provisioner --> keyVault : add cluster\ncertificate
deployApp -up-> sfCluster : deploy application

@enduml
